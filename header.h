#pragma once 
#define _CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_DEPRECATE

/*
* подключаемые заголовочные файлы
*/

#include <stdio.h>
#include <Windows.h>
#include <stdlib.h>
#include <string.h>

/*
* структура library_t хранит информацию о библиотеке
* number - номер библиотеки в базе данных
* name - имя библиотеки
* description - описание библиотеки
* language - язык программирования для которого создана библиотека
* version - версия библиотеки
* author - автор библиотеки
* license - лицензия библиотеки
*/
typedef struct {
	int number; 
	char name[51]; 
	char description[201];
	char language[51];
	float version; 
	char author[51]; 
	char license[51]; 
}library_t;
/*
* функция new_library - добавляет новую библиотеку в базу данных
* Элементы новой структуры заполняются пользователем
* Память для новой структуры выделяется в базе данных
* Функция возвращает указатель на массив структур
* ptr_arr - указатель на массив структур
* ptr_size - указатель на размер базы данных
*/
library_t* new_library(library_t*, int*);
/*
* Функция choice_num - возвращает цифру введённую пользователем
*/
int choice_num(void);
/*
* Функция delete_library - удаляет библиотеку из базы данных
* Уменьшает индекс всех библиотек, расположенных после удалённой, на 1
* Память, которая была выделена для удалённой библиотеки, освобождается
* Возвращает указатель на массив структур
* ptr_arr - указатель на массив структур
* size - размер базы данных
*/
library_t* delete_library(library_t*,int*);
/*
* Функция edit_library - даёт возможность изменить информацию о библиотеке, выбранной пользователем
* Возвращает указатель на массив структур
* ptr_arr - указатель на массив структур
*/
library_t* edit_library(library_t*);
/*
* Функция show_library - Выводит информацию об указанной библиотеке в консоль
* ptr_arr - указатель на массив структур
* index - индекс библиотеки
*/
void show_library(library_t*,int);
/*
* Функция show_all - выводит все библиотеки из базы данных в консоль
* возвращает указатель на массив структур
* ptr_arr - указатель на массив структур
* size - размер базы данных
*/
library_t* show_all(library_t*,int);
/*
* Функция put_term - возвращает введённый признак поиска
*/
char* put_term(void);
/*
* Функция search - обращается к функции поиска, которую выбрал пользователь, посредством ввода цифры
* Возвращает указатель на массив структур
* ptr_arr - указатель на массив структур
* size - размер базы данных
*/
library_t* search(library_t*, int);
/*
* Функция search_libraryLanguage - совершает поиск библиотек соответствующих введёному пользователем языку программирования
* Выводит найденные библиотеки в консоль
* Возвращает указатель на массив структур
* ptr_arr - указатель на массив структур
* size - размер базы данных
*/
library_t* search_libraryLanguage(library_t*,int);
/*
* Функция search_libraryName - совершает поиск библиотек соответствующих введёному пользователем названию библиотеки
* Выводит найденные библиотеки в консоль
* Возвращает указатель на массив структур
* ptr_arr - указатель на массив структур
* size - размер базы данных
*/
library_t* search_libraryName(library_t*,int);
/*
* Функция sort - обращается к функции сортировки, которую выбрал пользователь, посредством ввода цифры
* Возвращает указатель на массив структур
* ptr_arr - указатель на массив структур
* size - размер базы данных
*/
library_t* sort(library_t*, int);
/*
* Функция sort_libraryVersion - совершает сортировку по версиям библиотек
* Возвращает указатель на массив структур
* ptr_arr - указатель на массив структур
* size - размер базы данных
*/
library_t* sort_libraryVersion(library_t*,int);
/*
* Функция sort_libraryNumber - совершает сортировку по номерам библиотек в базе данных
* Возвращает указатель на массив структур
* ptr_arr - указатель на массив структур
* size - размер базы данных
*/
library_t* sort_libraryNumber(library_t*, int);
/*
* Функция compare - определяет порядок, используемый при сортировке
* принимает указатели
*/
void compare(void*, void*);
/*
* Функция init_list - инициализирует список
* ptr_arr - указатель на массив структур
* size - размер базы данных
*/
void init_list(library_t*, int);
/*
* Функция save - сохраняет базу данных в файл
* ptr_arr - указатель на массив структур
* size - размер базы данных
*/
int save(library_t*,int);
/*
* Функция load - читает размер базы данных и базу данных из файла
* pp_arr - указатель на указатель на массив структур
* size - размер базы данных
*/
int load(library_t**,int);
